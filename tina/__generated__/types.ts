//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  header: Header;
  headerConnection: HeaderConnection;
  hero: Hero;
  heroConnection: HeroConnection;
  organizations: Organizations;
  organizationsConnection: OrganizationsConnection;
  ourSolutions: OurSolutions;
  ourSolutionsConnection: OurSolutionsConnection;
  trustedBy: TrustedBy;
  trustedByConnection: TrustedByConnection;
  highQualitySolutions: HighQualitySolutions;
  highQualitySolutionsConnection: HighQualitySolutionsConnection;
  whyWelcomecure: WhyWelcomecure;
  whyWelcomecureConnection: WhyWelcomecureConnection;
  caseStudies: CaseStudies;
  caseStudiesConnection: CaseStudiesConnection;
  footer: Footer;
  footerConnection: FooterConnection;
  seo: Seo;
  seoConnection: SeoConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeaderArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeaderConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeaderFilter>;
};


export type QueryHeroArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeroConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeroFilter>;
};


export type QueryOrganizationsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrganizationsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<OrganizationsFilter>;
};


export type QueryOurSolutionsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOurSolutionsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<OurSolutionsFilter>;
};


export type QueryTrustedByArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTrustedByConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TrustedByFilter>;
};


export type QueryHighQualitySolutionsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHighQualitySolutionsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HighQualitySolutionsFilter>;
};


export type QueryWhyWelcomecureArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryWhyWelcomecureConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WhyWelcomecureFilter>;
};


export type QueryCaseStudiesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCaseStudiesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CaseStudiesFilter>;
};


export type QueryFooterArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFooterConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FooterFilter>;
};


export type QuerySeoArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySeoConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SeoFilter>;
};

export type DocumentFilter = {
  header?: InputMaybe<HeaderFilter>;
  hero?: InputMaybe<HeroFilter>;
  organizations?: InputMaybe<OrganizationsFilter>;
  ourSolutions?: InputMaybe<OurSolutionsFilter>;
  trustedBy?: InputMaybe<TrustedByFilter>;
  highQualitySolutions?: InputMaybe<HighQualitySolutionsFilter>;
  whyWelcomecure?: InputMaybe<WhyWelcomecureFilter>;
  caseStudies?: InputMaybe<CaseStudiesFilter>;
  footer?: InputMaybe<FooterFilter>;
  seo?: InputMaybe<SeoFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Header | Hero | Organizations | OurSolutions | TrustedBy | HighQualitySolutions | WhyWelcomecure | CaseStudies | Footer | Seo | Folder;

export type HeaderMenuItemsSubItems = {
  __typename?: 'HeaderMenuItemsSubItems';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HeaderMenuItems = {
  __typename?: 'HeaderMenuItems';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  subItems?: Maybe<Array<Maybe<HeaderMenuItemsSubItems>>>;
};

export type HeaderContactInfo = {
  __typename?: 'HeaderContactInfo';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  desktopIcon?: Maybe<Scalars['String']['output']>;
  mobileIcon?: Maybe<Scalars['String']['output']>;
  flag?: Maybe<Scalars['String']['output']>;
};

export type Header = Node & Document & {
  __typename?: 'Header';
  logo?: Maybe<Scalars['String']['output']>;
  menuItems?: Maybe<Array<Maybe<HeaderMenuItems>>>;
  loginText?: Maybe<Scalars['String']['output']>;
  registerText?: Maybe<Scalars['String']['output']>;
  contactInfo?: Maybe<Array<Maybe<HeaderContactInfo>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HeaderMenuItemsSubItemsFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type HeaderMenuItemsFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  subItems?: InputMaybe<HeaderMenuItemsSubItemsFilter>;
};

export type HeaderContactInfoFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  desktopIcon?: InputMaybe<ImageFilter>;
  mobileIcon?: InputMaybe<ImageFilter>;
  flag?: InputMaybe<ImageFilter>;
};

export type HeaderFilter = {
  logo?: InputMaybe<ImageFilter>;
  menuItems?: InputMaybe<HeaderMenuItemsFilter>;
  loginText?: InputMaybe<StringFilter>;
  registerText?: InputMaybe<StringFilter>;
  contactInfo?: InputMaybe<HeaderContactInfoFilter>;
};

export type HeaderConnectionEdges = {
  __typename?: 'HeaderConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Header>;
};

export type HeaderConnection = Connection & {
  __typename?: 'HeaderConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HeaderConnectionEdges>>>;
};

export type Hero = Node & Document & {
  __typename?: 'Hero';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  backgroundImage?: Maybe<Scalars['String']['output']>;
  backgroundImageForMobile?: Maybe<Scalars['String']['output']>;
  primaryCta?: Maybe<Scalars['String']['output']>;
  primaryCtaUrl?: Maybe<Scalars['String']['output']>;
  secondaryCta?: Maybe<Scalars['String']['output']>;
  secondaryCtaUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HeroFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  backgroundImage?: InputMaybe<ImageFilter>;
  backgroundImageForMobile?: InputMaybe<ImageFilter>;
  primaryCta?: InputMaybe<StringFilter>;
  primaryCtaUrl?: InputMaybe<StringFilter>;
  secondaryCta?: InputMaybe<StringFilter>;
  secondaryCtaUrl?: InputMaybe<StringFilter>;
};

export type HeroConnectionEdges = {
  __typename?: 'HeroConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Hero>;
};

export type HeroConnection = Connection & {
  __typename?: 'HeroConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HeroConnectionEdges>>>;
};

export type OrganizationsLogos = {
  __typename?: 'OrganizationsLogos';
  src?: Maybe<Scalars['String']['output']>;
};

export type Organizations = Node & Document & {
  __typename?: 'Organizations';
  title?: Maybe<Scalars['String']['output']>;
  logos?: Maybe<Array<Maybe<OrganizationsLogos>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type OrganizationsLogosFilter = {
  src?: InputMaybe<ImageFilter>;
};

export type OrganizationsFilter = {
  title?: InputMaybe<StringFilter>;
  logos?: InputMaybe<OrganizationsLogosFilter>;
};

export type OrganizationsConnectionEdges = {
  __typename?: 'OrganizationsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Organizations>;
};

export type OrganizationsConnection = Connection & {
  __typename?: 'OrganizationsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<OrganizationsConnectionEdges>>>;
};

export type OurSolutionsLeftSolutions = {
  __typename?: 'OurSolutionsLeftSolutions';
  title?: Maybe<Scalars['String']['output']>;
  backgroundImage?: Maybe<Scalars['String']['output']>;
  highlight?: Maybe<Scalars['Boolean']['output']>;
};

export type OurSolutionsSolutionsList = {
  __typename?: 'OurSolutionsSolutionsList';
  label?: Maybe<Scalars['String']['output']>;
};

export type OurSolutions = Node & Document & {
  __typename?: 'OurSolutions';
  title?: Maybe<Scalars['String']['output']>;
  leftSolutions?: Maybe<Array<Maybe<OurSolutionsLeftSolutions>>>;
  rightImage?: Maybe<Scalars['String']['output']>;
  solutionsList?: Maybe<Array<Maybe<OurSolutionsSolutionsList>>>;
  ctaText?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OurSolutionsLeftSolutionsFilter = {
  title?: InputMaybe<StringFilter>;
  backgroundImage?: InputMaybe<ImageFilter>;
  highlight?: InputMaybe<BooleanFilter>;
};

export type OurSolutionsSolutionsListFilter = {
  label?: InputMaybe<StringFilter>;
};

export type OurSolutionsFilter = {
  title?: InputMaybe<StringFilter>;
  leftSolutions?: InputMaybe<OurSolutionsLeftSolutionsFilter>;
  rightImage?: InputMaybe<ImageFilter>;
  solutionsList?: InputMaybe<OurSolutionsSolutionsListFilter>;
  ctaText?: InputMaybe<StringFilter>;
};

export type OurSolutionsConnectionEdges = {
  __typename?: 'OurSolutionsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<OurSolutions>;
};

export type OurSolutionsConnection = Connection & {
  __typename?: 'OurSolutionsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<OurSolutionsConnectionEdges>>>;
};

export type TrustedByStats = {
  __typename?: 'TrustedByStats';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
};

export type TrustedByReviews = {
  __typename?: 'TrustedByReviews';
  review?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  position?: Maybe<Scalars['String']['output']>;
};

export type TrustedBy = Node & Document & {
  __typename?: 'TrustedBy';
  title?: Maybe<Scalars['String']['output']>;
  stats?: Maybe<Array<Maybe<TrustedByStats>>>;
  reviews?: Maybe<Array<Maybe<TrustedByReviews>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type TrustedByStatsFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
};

export type TrustedByReviewsFilter = {
  review?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  position?: InputMaybe<StringFilter>;
};

export type TrustedByFilter = {
  title?: InputMaybe<StringFilter>;
  stats?: InputMaybe<TrustedByStatsFilter>;
  reviews?: InputMaybe<TrustedByReviewsFilter>;
};

export type TrustedByConnectionEdges = {
  __typename?: 'TrustedByConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<TrustedBy>;
};

export type TrustedByConnection = Connection & {
  __typename?: 'TrustedByConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<TrustedByConnectionEdges>>>;
};

export type HighQualitySolutionsSolutions = {
  __typename?: 'HighQualitySolutionsSolutions';
  image?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
};

export type HighQualitySolutions = Node & Document & {
  __typename?: 'HighQualitySolutions';
  title?: Maybe<Scalars['String']['output']>;
  solutions?: Maybe<Array<Maybe<HighQualitySolutionsSolutions>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HighQualitySolutionsSolutionsFilter = {
  image?: InputMaybe<ImageFilter>;
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
};

export type HighQualitySolutionsFilter = {
  title?: InputMaybe<StringFilter>;
  solutions?: InputMaybe<HighQualitySolutionsSolutionsFilter>;
};

export type HighQualitySolutionsConnectionEdges = {
  __typename?: 'HighQualitySolutionsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<HighQualitySolutions>;
};

export type HighQualitySolutionsConnection = Connection & {
  __typename?: 'HighQualitySolutionsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HighQualitySolutionsConnectionEdges>>>;
};

export type WhyWelcomecureFeatures = {
  __typename?: 'WhyWelcomecureFeatures';
  icon?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type WhyWelcomecure = Node & Document & {
  __typename?: 'WhyWelcomecure';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  ctaText?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<WhyWelcomecureFeatures>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type WhyWelcomecureFeaturesFilter = {
  icon?: InputMaybe<ImageFilter>;
  text?: InputMaybe<StringFilter>;
};

export type WhyWelcomecureFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  ctaText?: InputMaybe<StringFilter>;
  features?: InputMaybe<WhyWelcomecureFeaturesFilter>;
};

export type WhyWelcomecureConnectionEdges = {
  __typename?: 'WhyWelcomecureConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<WhyWelcomecure>;
};

export type WhyWelcomecureConnection = Connection & {
  __typename?: 'WhyWelcomecureConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<WhyWelcomecureConnectionEdges>>>;
};

export type CaseStudiesItems = {
  __typename?: 'CaseStudiesItems';
  image?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  publishDate?: Maybe<Scalars['String']['output']>;
  publishBy?: Maybe<Scalars['String']['output']>;
};

export type CaseStudies = Node & Document & {
  __typename?: 'CaseStudies';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  items?: Maybe<Array<Maybe<CaseStudiesItems>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type CaseStudiesItemsFilter = {
  image?: InputMaybe<ImageFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<StringFilter>;
  publishBy?: InputMaybe<StringFilter>;
};

export type CaseStudiesFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  items?: InputMaybe<CaseStudiesItemsFilter>;
};

export type CaseStudiesConnectionEdges = {
  __typename?: 'CaseStudiesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<CaseStudies>;
};

export type CaseStudiesConnection = Connection & {
  __typename?: 'CaseStudiesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CaseStudiesConnectionEdges>>>;
};

export type FooterSocialLinks = {
  __typename?: 'FooterSocialLinks';
  icon?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type FooterContactInfo = {
  __typename?: 'FooterContactInfo';
  email?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
};

export type FooterFooterLinksLinks = {
  __typename?: 'FooterFooterLinksLinks';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type FooterFooterLinks = {
  __typename?: 'FooterFooterLinks';
  title?: Maybe<Scalars['String']['output']>;
  links?: Maybe<Array<Maybe<FooterFooterLinksLinks>>>;
};

export type FooterPaymentMethods = {
  __typename?: 'FooterPaymentMethods';
  icon?: Maybe<Scalars['String']['output']>;
};

export type FooterLegalLinks = {
  __typename?: 'FooterLegalLinks';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type Footer = Node & Document & {
  __typename?: 'Footer';
  heading?: Maybe<Scalars['String']['output']>;
  subheading?: Maybe<Scalars['String']['output']>;
  socialLinks?: Maybe<Array<Maybe<FooterSocialLinks>>>;
  emailPlaceholder?: Maybe<Scalars['String']['output']>;
  newsletterButtonText?: Maybe<Scalars['String']['output']>;
  contactInfo?: Maybe<FooterContactInfo>;
  footerLinks?: Maybe<Array<Maybe<FooterFooterLinks>>>;
  paymentMethods?: Maybe<Array<Maybe<FooterPaymentMethods>>>;
  copyright?: Maybe<Scalars['String']['output']>;
  legalLinks?: Maybe<Array<Maybe<FooterLegalLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type FooterSocialLinksFilter = {
  icon?: InputMaybe<ImageFilter>;
  url?: InputMaybe<StringFilter>;
};

export type FooterContactInfoFilter = {
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
};

export type FooterFooterLinksLinksFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type FooterFooterLinksFilter = {
  title?: InputMaybe<StringFilter>;
  links?: InputMaybe<FooterFooterLinksLinksFilter>;
};

export type FooterPaymentMethodsFilter = {
  icon?: InputMaybe<ImageFilter>;
};

export type FooterLegalLinksFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type FooterFilter = {
  heading?: InputMaybe<StringFilter>;
  subheading?: InputMaybe<StringFilter>;
  socialLinks?: InputMaybe<FooterSocialLinksFilter>;
  emailPlaceholder?: InputMaybe<StringFilter>;
  newsletterButtonText?: InputMaybe<StringFilter>;
  contactInfo?: InputMaybe<FooterContactInfoFilter>;
  footerLinks?: InputMaybe<FooterFooterLinksFilter>;
  paymentMethods?: InputMaybe<FooterPaymentMethodsFilter>;
  copyright?: InputMaybe<StringFilter>;
  legalLinks?: InputMaybe<FooterLegalLinksFilter>;
};

export type FooterConnectionEdges = {
  __typename?: 'FooterConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Footer>;
};

export type FooterConnection = Connection & {
  __typename?: 'FooterConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<FooterConnectionEdges>>>;
};

export type SeoOpenGraph = {
  __typename?: 'SeoOpenGraph';
  ogTitle?: Maybe<Scalars['String']['output']>;
  ogDescription?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Scalars['String']['output']>;
};

export type SeoTwitter = {
  __typename?: 'SeoTwitter';
  twitterTitle?: Maybe<Scalars['String']['output']>;
  twitterDescription?: Maybe<Scalars['String']['output']>;
  twitterImage?: Maybe<Scalars['String']['output']>;
};

export type Seo = Node & Document & {
  __typename?: 'Seo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  openGraph?: Maybe<SeoOpenGraph>;
  twitter?: Maybe<SeoTwitter>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SeoOpenGraphFilter = {
  ogTitle?: InputMaybe<StringFilter>;
  ogDescription?: InputMaybe<StringFilter>;
  ogImage?: InputMaybe<ImageFilter>;
};

export type SeoTwitterFilter = {
  twitterTitle?: InputMaybe<StringFilter>;
  twitterDescription?: InputMaybe<StringFilter>;
  twitterImage?: InputMaybe<ImageFilter>;
};

export type SeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  openGraph?: InputMaybe<SeoOpenGraphFilter>;
  twitter?: InputMaybe<SeoTwitterFilter>;
};

export type SeoConnectionEdges = {
  __typename?: 'SeoConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Seo>;
};

export type SeoConnection = Connection & {
  __typename?: 'SeoConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SeoConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateHeader: Header;
  createHeader: Header;
  updateHero: Hero;
  createHero: Hero;
  updateOrganizations: Organizations;
  createOrganizations: Organizations;
  updateOurSolutions: OurSolutions;
  createOurSolutions: OurSolutions;
  updateTrustedBy: TrustedBy;
  createTrustedBy: TrustedBy;
  updateHighQualitySolutions: HighQualitySolutions;
  createHighQualitySolutions: HighQualitySolutions;
  updateWhyWelcomecure: WhyWelcomecure;
  createWhyWelcomecure: WhyWelcomecure;
  updateCaseStudies: CaseStudies;
  createCaseStudies: CaseStudies;
  updateFooter: Footer;
  createFooter: Footer;
  updateSeo: Seo;
  createSeo: Seo;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateHeaderArgs = {
  relativePath: Scalars['String']['input'];
  params: HeaderMutation;
};


export type MutationCreateHeaderArgs = {
  relativePath: Scalars['String']['input'];
  params: HeaderMutation;
};


export type MutationUpdateHeroArgs = {
  relativePath: Scalars['String']['input'];
  params: HeroMutation;
};


export type MutationCreateHeroArgs = {
  relativePath: Scalars['String']['input'];
  params: HeroMutation;
};


export type MutationUpdateOrganizationsArgs = {
  relativePath: Scalars['String']['input'];
  params: OrganizationsMutation;
};


export type MutationCreateOrganizationsArgs = {
  relativePath: Scalars['String']['input'];
  params: OrganizationsMutation;
};


export type MutationUpdateOurSolutionsArgs = {
  relativePath: Scalars['String']['input'];
  params: OurSolutionsMutation;
};


export type MutationCreateOurSolutionsArgs = {
  relativePath: Scalars['String']['input'];
  params: OurSolutionsMutation;
};


export type MutationUpdateTrustedByArgs = {
  relativePath: Scalars['String']['input'];
  params: TrustedByMutation;
};


export type MutationCreateTrustedByArgs = {
  relativePath: Scalars['String']['input'];
  params: TrustedByMutation;
};


export type MutationUpdateHighQualitySolutionsArgs = {
  relativePath: Scalars['String']['input'];
  params: HighQualitySolutionsMutation;
};


export type MutationCreateHighQualitySolutionsArgs = {
  relativePath: Scalars['String']['input'];
  params: HighQualitySolutionsMutation;
};


export type MutationUpdateWhyWelcomecureArgs = {
  relativePath: Scalars['String']['input'];
  params: WhyWelcomecureMutation;
};


export type MutationCreateWhyWelcomecureArgs = {
  relativePath: Scalars['String']['input'];
  params: WhyWelcomecureMutation;
};


export type MutationUpdateCaseStudiesArgs = {
  relativePath: Scalars['String']['input'];
  params: CaseStudiesMutation;
};


export type MutationCreateCaseStudiesArgs = {
  relativePath: Scalars['String']['input'];
  params: CaseStudiesMutation;
};


export type MutationUpdateFooterArgs = {
  relativePath: Scalars['String']['input'];
  params: FooterMutation;
};


export type MutationCreateFooterArgs = {
  relativePath: Scalars['String']['input'];
  params: FooterMutation;
};


export type MutationUpdateSeoArgs = {
  relativePath: Scalars['String']['input'];
  params: SeoMutation;
};


export type MutationCreateSeoArgs = {
  relativePath: Scalars['String']['input'];
  params: SeoMutation;
};

export type DocumentUpdateMutation = {
  header?: InputMaybe<HeaderMutation>;
  hero?: InputMaybe<HeroMutation>;
  organizations?: InputMaybe<OrganizationsMutation>;
  ourSolutions?: InputMaybe<OurSolutionsMutation>;
  trustedBy?: InputMaybe<TrustedByMutation>;
  highQualitySolutions?: InputMaybe<HighQualitySolutionsMutation>;
  whyWelcomecure?: InputMaybe<WhyWelcomecureMutation>;
  caseStudies?: InputMaybe<CaseStudiesMutation>;
  footer?: InputMaybe<FooterMutation>;
  seo?: InputMaybe<SeoMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  header?: InputMaybe<HeaderMutation>;
  hero?: InputMaybe<HeroMutation>;
  organizations?: InputMaybe<OrganizationsMutation>;
  ourSolutions?: InputMaybe<OurSolutionsMutation>;
  trustedBy?: InputMaybe<TrustedByMutation>;
  highQualitySolutions?: InputMaybe<HighQualitySolutionsMutation>;
  whyWelcomecure?: InputMaybe<WhyWelcomecureMutation>;
  caseStudies?: InputMaybe<CaseStudiesMutation>;
  footer?: InputMaybe<FooterMutation>;
  seo?: InputMaybe<SeoMutation>;
};

export type HeaderMenuItemsSubItemsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type HeaderMenuItemsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  subItems?: InputMaybe<Array<InputMaybe<HeaderMenuItemsSubItemsMutation>>>;
};

export type HeaderContactInfoMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  desktopIcon?: InputMaybe<Scalars['String']['input']>;
  mobileIcon?: InputMaybe<Scalars['String']['input']>;
  flag?: InputMaybe<Scalars['String']['input']>;
};

export type HeaderMutation = {
  logo?: InputMaybe<Scalars['String']['input']>;
  menuItems?: InputMaybe<Array<InputMaybe<HeaderMenuItemsMutation>>>;
  loginText?: InputMaybe<Scalars['String']['input']>;
  registerText?: InputMaybe<Scalars['String']['input']>;
  contactInfo?: InputMaybe<Array<InputMaybe<HeaderContactInfoMutation>>>;
};

export type HeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  backgroundImageForMobile?: InputMaybe<Scalars['String']['input']>;
  primaryCta?: InputMaybe<Scalars['String']['input']>;
  primaryCtaUrl?: InputMaybe<Scalars['String']['input']>;
  secondaryCta?: InputMaybe<Scalars['String']['input']>;
  secondaryCtaUrl?: InputMaybe<Scalars['String']['input']>;
};

export type OrganizationsLogosMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
};

export type OrganizationsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  logos?: InputMaybe<Array<InputMaybe<OrganizationsLogosMutation>>>;
};

export type OurSolutionsLeftSolutionsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  highlight?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OurSolutionsSolutionsListMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
};

export type OurSolutionsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  leftSolutions?: InputMaybe<Array<InputMaybe<OurSolutionsLeftSolutionsMutation>>>;
  rightImage?: InputMaybe<Scalars['String']['input']>;
  solutionsList?: InputMaybe<Array<InputMaybe<OurSolutionsSolutionsListMutation>>>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
};

export type TrustedByStatsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
};

export type TrustedByReviewsMutation = {
  review?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  position?: InputMaybe<Scalars['String']['input']>;
};

export type TrustedByMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<TrustedByStatsMutation>>>;
  reviews?: InputMaybe<Array<InputMaybe<TrustedByReviewsMutation>>>;
};

export type HighQualitySolutionsSolutionsMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
};

export type HighQualitySolutionsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  solutions?: InputMaybe<Array<InputMaybe<HighQualitySolutionsSolutionsMutation>>>;
};

export type WhyWelcomecureFeaturesMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type WhyWelcomecureMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<WhyWelcomecureFeaturesMutation>>>;
};

export type CaseStudiesItemsMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  publishDate?: InputMaybe<Scalars['String']['input']>;
  publishBy?: InputMaybe<Scalars['String']['input']>;
};

export type CaseStudiesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<CaseStudiesItemsMutation>>>;
};

export type FooterSocialLinksMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type FooterContactInfoMutation = {
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type FooterFooterLinksLinksMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type FooterFooterLinksMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  links?: InputMaybe<Array<InputMaybe<FooterFooterLinksLinksMutation>>>;
};

export type FooterPaymentMethodsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type FooterLegalLinksMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type FooterMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  subheading?: InputMaybe<Scalars['String']['input']>;
  socialLinks?: InputMaybe<Array<InputMaybe<FooterSocialLinksMutation>>>;
  emailPlaceholder?: InputMaybe<Scalars['String']['input']>;
  newsletterButtonText?: InputMaybe<Scalars['String']['input']>;
  contactInfo?: InputMaybe<FooterContactInfoMutation>;
  footerLinks?: InputMaybe<Array<InputMaybe<FooterFooterLinksMutation>>>;
  paymentMethods?: InputMaybe<Array<InputMaybe<FooterPaymentMethodsMutation>>>;
  copyright?: InputMaybe<Scalars['String']['input']>;
  legalLinks?: InputMaybe<Array<InputMaybe<FooterLegalLinksMutation>>>;
};

export type SeoOpenGraphMutation = {
  ogTitle?: InputMaybe<Scalars['String']['input']>;
  ogDescription?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
};

export type SeoTwitterMutation = {
  twitterTitle?: InputMaybe<Scalars['String']['input']>;
  twitterDescription?: InputMaybe<Scalars['String']['input']>;
  twitterImage?: InputMaybe<Scalars['String']['input']>;
};

export type SeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  openGraph?: InputMaybe<SeoOpenGraphMutation>;
  twitter?: InputMaybe<SeoTwitterMutation>;
};

export type HeaderPartsFragment = { __typename: 'Header', logo?: string | null, loginText?: string | null, registerText?: string | null, menuItems?: Array<{ __typename: 'HeaderMenuItems', label?: string | null, url?: string | null, subItems?: Array<{ __typename: 'HeaderMenuItemsSubItems', label?: string | null, url?: string | null } | null> | null } | null> | null, contactInfo?: Array<{ __typename: 'HeaderContactInfo', label?: string | null, url?: string | null, desktopIcon?: string | null, mobileIcon?: string | null, flag?: string | null } | null> | null };

export type HeroPartsFragment = { __typename: 'Hero', title?: string | null, subtitle?: string | null, backgroundImage?: string | null, backgroundImageForMobile?: string | null, primaryCta?: string | null, primaryCtaUrl?: string | null, secondaryCta?: string | null, secondaryCtaUrl?: string | null };

export type OrganizationsPartsFragment = { __typename: 'Organizations', title?: string | null, logos?: Array<{ __typename: 'OrganizationsLogos', src?: string | null } | null> | null };

export type OurSolutionsPartsFragment = { __typename: 'OurSolutions', title?: string | null, rightImage?: string | null, ctaText?: string | null, leftSolutions?: Array<{ __typename: 'OurSolutionsLeftSolutions', title?: string | null, backgroundImage?: string | null, highlight?: boolean | null } | null> | null, solutionsList?: Array<{ __typename: 'OurSolutionsSolutionsList', label?: string | null } | null> | null };

export type TrustedByPartsFragment = { __typename: 'TrustedBy', title?: string | null, stats?: Array<{ __typename: 'TrustedByStats', title?: string | null, subtitle?: string | null } | null> | null, reviews?: Array<{ __typename: 'TrustedByReviews', review?: string | null, name?: string | null, position?: string | null } | null> | null };

export type HighQualitySolutionsPartsFragment = { __typename: 'HighQualitySolutions', title?: string | null, solutions?: Array<{ __typename: 'HighQualitySolutionsSolutions', image?: string | null, title?: string | null, subtitle?: string | null } | null> | null };

export type WhyWelcomecurePartsFragment = { __typename: 'WhyWelcomecure', title?: string | null, subtitle?: string | null, image?: string | null, ctaText?: string | null, features?: Array<{ __typename: 'WhyWelcomecureFeatures', icon?: string | null, text?: string | null } | null> | null };

export type CaseStudiesPartsFragment = { __typename: 'CaseStudies', title?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'CaseStudiesItems', image?: string | null, title?: string | null, description?: string | null, publishDate?: string | null, publishBy?: string | null } | null> | null };

export type FooterPartsFragment = { __typename: 'Footer', heading?: string | null, subheading?: string | null, emailPlaceholder?: string | null, newsletterButtonText?: string | null, copyright?: string | null, socialLinks?: Array<{ __typename: 'FooterSocialLinks', icon?: string | null, url?: string | null } | null> | null, contactInfo?: { __typename: 'FooterContactInfo', email?: string | null, phone?: string | null } | null, footerLinks?: Array<{ __typename: 'FooterFooterLinks', title?: string | null, links?: Array<{ __typename: 'FooterFooterLinksLinks', label?: string | null, url?: string | null } | null> | null } | null> | null, paymentMethods?: Array<{ __typename: 'FooterPaymentMethods', icon?: string | null } | null> | null, legalLinks?: Array<{ __typename: 'FooterLegalLinks', label?: string | null, url?: string | null } | null> | null };

export type SeoPartsFragment = { __typename: 'Seo', title?: string | null, description?: string | null, openGraph?: { __typename: 'SeoOpenGraph', ogTitle?: string | null, ogDescription?: string | null, ogImage?: string | null } | null, twitter?: { __typename: 'SeoTwitter', twitterTitle?: string | null, twitterDescription?: string | null, twitterImage?: string | null } | null };

export type HeaderQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HeaderQuery = { __typename?: 'Query', header: { __typename: 'Header', id: string, logo?: string | null, loginText?: string | null, registerText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, menuItems?: Array<{ __typename: 'HeaderMenuItems', label?: string | null, url?: string | null, subItems?: Array<{ __typename: 'HeaderMenuItemsSubItems', label?: string | null, url?: string | null } | null> | null } | null> | null, contactInfo?: Array<{ __typename: 'HeaderContactInfo', label?: string | null, url?: string | null, desktopIcon?: string | null, mobileIcon?: string | null, flag?: string | null } | null> | null } };

export type HeaderConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeaderFilter>;
}>;


export type HeaderConnectionQuery = { __typename?: 'Query', headerConnection: { __typename?: 'HeaderConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HeaderConnectionEdges', cursor: string, node?: { __typename: 'Header', id: string, logo?: string | null, loginText?: string | null, registerText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, menuItems?: Array<{ __typename: 'HeaderMenuItems', label?: string | null, url?: string | null, subItems?: Array<{ __typename: 'HeaderMenuItemsSubItems', label?: string | null, url?: string | null } | null> | null } | null> | null, contactInfo?: Array<{ __typename: 'HeaderContactInfo', label?: string | null, url?: string | null, desktopIcon?: string | null, mobileIcon?: string | null, flag?: string | null } | null> | null } | null } | null> | null } };

export type HeroQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HeroQuery = { __typename?: 'Query', hero: { __typename: 'Hero', id: string, title?: string | null, subtitle?: string | null, backgroundImage?: string | null, backgroundImageForMobile?: string | null, primaryCta?: string | null, primaryCtaUrl?: string | null, secondaryCta?: string | null, secondaryCtaUrl?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type HeroConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeroFilter>;
}>;


export type HeroConnectionQuery = { __typename?: 'Query', heroConnection: { __typename?: 'HeroConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HeroConnectionEdges', cursor: string, node?: { __typename: 'Hero', id: string, title?: string | null, subtitle?: string | null, backgroundImage?: string | null, backgroundImageForMobile?: string | null, primaryCta?: string | null, primaryCtaUrl?: string | null, secondaryCta?: string | null, secondaryCtaUrl?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type OrganizationsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type OrganizationsQuery = { __typename?: 'Query', organizations: { __typename: 'Organizations', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, logos?: Array<{ __typename: 'OrganizationsLogos', src?: string | null } | null> | null } };

export type OrganizationsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<OrganizationsFilter>;
}>;


export type OrganizationsConnectionQuery = { __typename?: 'Query', organizationsConnection: { __typename?: 'OrganizationsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'OrganizationsConnectionEdges', cursor: string, node?: { __typename: 'Organizations', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, logos?: Array<{ __typename: 'OrganizationsLogos', src?: string | null } | null> | null } | null } | null> | null } };

export type OurSolutionsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type OurSolutionsQuery = { __typename?: 'Query', ourSolutions: { __typename: 'OurSolutions', id: string, title?: string | null, rightImage?: string | null, ctaText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, leftSolutions?: Array<{ __typename: 'OurSolutionsLeftSolutions', title?: string | null, backgroundImage?: string | null, highlight?: boolean | null } | null> | null, solutionsList?: Array<{ __typename: 'OurSolutionsSolutionsList', label?: string | null } | null> | null } };

export type OurSolutionsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<OurSolutionsFilter>;
}>;


export type OurSolutionsConnectionQuery = { __typename?: 'Query', ourSolutionsConnection: { __typename?: 'OurSolutionsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'OurSolutionsConnectionEdges', cursor: string, node?: { __typename: 'OurSolutions', id: string, title?: string | null, rightImage?: string | null, ctaText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, leftSolutions?: Array<{ __typename: 'OurSolutionsLeftSolutions', title?: string | null, backgroundImage?: string | null, highlight?: boolean | null } | null> | null, solutionsList?: Array<{ __typename: 'OurSolutionsSolutionsList', label?: string | null } | null> | null } | null } | null> | null } };

export type TrustedByQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type TrustedByQuery = { __typename?: 'Query', trustedBy: { __typename: 'TrustedBy', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, stats?: Array<{ __typename: 'TrustedByStats', title?: string | null, subtitle?: string | null } | null> | null, reviews?: Array<{ __typename: 'TrustedByReviews', review?: string | null, name?: string | null, position?: string | null } | null> | null } };

export type TrustedByConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TrustedByFilter>;
}>;


export type TrustedByConnectionQuery = { __typename?: 'Query', trustedByConnection: { __typename?: 'TrustedByConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TrustedByConnectionEdges', cursor: string, node?: { __typename: 'TrustedBy', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, stats?: Array<{ __typename: 'TrustedByStats', title?: string | null, subtitle?: string | null } | null> | null, reviews?: Array<{ __typename: 'TrustedByReviews', review?: string | null, name?: string | null, position?: string | null } | null> | null } | null } | null> | null } };

export type HighQualitySolutionsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HighQualitySolutionsQuery = { __typename?: 'Query', highQualitySolutions: { __typename: 'HighQualitySolutions', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, solutions?: Array<{ __typename: 'HighQualitySolutionsSolutions', image?: string | null, title?: string | null, subtitle?: string | null } | null> | null } };

export type HighQualitySolutionsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HighQualitySolutionsFilter>;
}>;


export type HighQualitySolutionsConnectionQuery = { __typename?: 'Query', highQualitySolutionsConnection: { __typename?: 'HighQualitySolutionsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HighQualitySolutionsConnectionEdges', cursor: string, node?: { __typename: 'HighQualitySolutions', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, solutions?: Array<{ __typename: 'HighQualitySolutionsSolutions', image?: string | null, title?: string | null, subtitle?: string | null } | null> | null } | null } | null> | null } };

export type WhyWelcomecureQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type WhyWelcomecureQuery = { __typename?: 'Query', whyWelcomecure: { __typename: 'WhyWelcomecure', id: string, title?: string | null, subtitle?: string | null, image?: string | null, ctaText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, features?: Array<{ __typename: 'WhyWelcomecureFeatures', icon?: string | null, text?: string | null } | null> | null } };

export type WhyWelcomecureConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WhyWelcomecureFilter>;
}>;


export type WhyWelcomecureConnectionQuery = { __typename?: 'Query', whyWelcomecureConnection: { __typename?: 'WhyWelcomecureConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WhyWelcomecureConnectionEdges', cursor: string, node?: { __typename: 'WhyWelcomecure', id: string, title?: string | null, subtitle?: string | null, image?: string | null, ctaText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, features?: Array<{ __typename: 'WhyWelcomecureFeatures', icon?: string | null, text?: string | null } | null> | null } | null } | null> | null } };

export type CaseStudiesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CaseStudiesQuery = { __typename?: 'Query', caseStudies: { __typename: 'CaseStudies', id: string, title?: string | null, subtitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, items?: Array<{ __typename: 'CaseStudiesItems', image?: string | null, title?: string | null, description?: string | null, publishDate?: string | null, publishBy?: string | null } | null> | null } };

export type CaseStudiesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CaseStudiesFilter>;
}>;


export type CaseStudiesConnectionQuery = { __typename?: 'Query', caseStudiesConnection: { __typename?: 'CaseStudiesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CaseStudiesConnectionEdges', cursor: string, node?: { __typename: 'CaseStudies', id: string, title?: string | null, subtitle?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, items?: Array<{ __typename: 'CaseStudiesItems', image?: string | null, title?: string | null, description?: string | null, publishDate?: string | null, publishBy?: string | null } | null> | null } | null } | null> | null } };

export type FooterQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type FooterQuery = { __typename?: 'Query', footer: { __typename: 'Footer', id: string, heading?: string | null, subheading?: string | null, emailPlaceholder?: string | null, newsletterButtonText?: string | null, copyright?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, socialLinks?: Array<{ __typename: 'FooterSocialLinks', icon?: string | null, url?: string | null } | null> | null, contactInfo?: { __typename: 'FooterContactInfo', email?: string | null, phone?: string | null } | null, footerLinks?: Array<{ __typename: 'FooterFooterLinks', title?: string | null, links?: Array<{ __typename: 'FooterFooterLinksLinks', label?: string | null, url?: string | null } | null> | null } | null> | null, paymentMethods?: Array<{ __typename: 'FooterPaymentMethods', icon?: string | null } | null> | null, legalLinks?: Array<{ __typename: 'FooterLegalLinks', label?: string | null, url?: string | null } | null> | null } };

export type FooterConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FooterFilter>;
}>;


export type FooterConnectionQuery = { __typename?: 'Query', footerConnection: { __typename?: 'FooterConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FooterConnectionEdges', cursor: string, node?: { __typename: 'Footer', id: string, heading?: string | null, subheading?: string | null, emailPlaceholder?: string | null, newsletterButtonText?: string | null, copyright?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, socialLinks?: Array<{ __typename: 'FooterSocialLinks', icon?: string | null, url?: string | null } | null> | null, contactInfo?: { __typename: 'FooterContactInfo', email?: string | null, phone?: string | null } | null, footerLinks?: Array<{ __typename: 'FooterFooterLinks', title?: string | null, links?: Array<{ __typename: 'FooterFooterLinksLinks', label?: string | null, url?: string | null } | null> | null } | null> | null, paymentMethods?: Array<{ __typename: 'FooterPaymentMethods', icon?: string | null } | null> | null, legalLinks?: Array<{ __typename: 'FooterLegalLinks', label?: string | null, url?: string | null } | null> | null } | null } | null> | null } };

export type SeoQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SeoQuery = { __typename?: 'Query', seo: { __typename: 'Seo', id: string, title?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, openGraph?: { __typename: 'SeoOpenGraph', ogTitle?: string | null, ogDescription?: string | null, ogImage?: string | null } | null, twitter?: { __typename: 'SeoTwitter', twitterTitle?: string | null, twitterDescription?: string | null, twitterImage?: string | null } | null } };

export type SeoConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SeoFilter>;
}>;


export type SeoConnectionQuery = { __typename?: 'Query', seoConnection: { __typename?: 'SeoConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SeoConnectionEdges', cursor: string, node?: { __typename: 'Seo', id: string, title?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, openGraph?: { __typename: 'SeoOpenGraph', ogTitle?: string | null, ogDescription?: string | null, ogImage?: string | null } | null, twitter?: { __typename: 'SeoTwitter', twitterTitle?: string | null, twitterDescription?: string | null, twitterImage?: string | null } | null } | null } | null> | null } };

export const HeaderPartsFragmentDoc = gql`
    fragment HeaderParts on Header {
  __typename
  logo
  menuItems {
    __typename
    label
    url
    subItems {
      __typename
      label
      url
    }
  }
  loginText
  registerText
  contactInfo {
    __typename
    label
    url
    desktopIcon
    mobileIcon
    flag
  }
}
    `;
export const HeroPartsFragmentDoc = gql`
    fragment HeroParts on Hero {
  __typename
  title
  subtitle
  backgroundImage
  backgroundImageForMobile
  primaryCta
  primaryCtaUrl
  secondaryCta
  secondaryCtaUrl
}
    `;
export const OrganizationsPartsFragmentDoc = gql`
    fragment OrganizationsParts on Organizations {
  __typename
  title
  logos {
    __typename
    src
  }
}
    `;
export const OurSolutionsPartsFragmentDoc = gql`
    fragment OurSolutionsParts on OurSolutions {
  __typename
  title
  leftSolutions {
    __typename
    title
    backgroundImage
    highlight
  }
  rightImage
  solutionsList {
    __typename
    label
  }
  ctaText
}
    `;
export const TrustedByPartsFragmentDoc = gql`
    fragment TrustedByParts on TrustedBy {
  __typename
  title
  stats {
    __typename
    title
    subtitle
  }
  reviews {
    __typename
    review
    name
    position
  }
}
    `;
export const HighQualitySolutionsPartsFragmentDoc = gql`
    fragment HighQualitySolutionsParts on HighQualitySolutions {
  __typename
  title
  solutions {
    __typename
    image
    title
    subtitle
  }
}
    `;
export const WhyWelcomecurePartsFragmentDoc = gql`
    fragment WhyWelcomecureParts on WhyWelcomecure {
  __typename
  title
  subtitle
  image
  ctaText
  features {
    __typename
    icon
    text
  }
}
    `;
export const CaseStudiesPartsFragmentDoc = gql`
    fragment CaseStudiesParts on CaseStudies {
  __typename
  title
  subtitle
  items {
    __typename
    image
    title
    description
    publishDate
    publishBy
  }
}
    `;
export const FooterPartsFragmentDoc = gql`
    fragment FooterParts on Footer {
  __typename
  heading
  subheading
  socialLinks {
    __typename
    icon
    url
  }
  emailPlaceholder
  newsletterButtonText
  contactInfo {
    __typename
    email
    phone
  }
  footerLinks {
    __typename
    title
    links {
      __typename
      label
      url
    }
  }
  paymentMethods {
    __typename
    icon
  }
  copyright
  legalLinks {
    __typename
    label
    url
  }
}
    `;
export const SeoPartsFragmentDoc = gql`
    fragment SeoParts on Seo {
  __typename
  title
  description
  openGraph {
    __typename
    ogTitle
    ogDescription
    ogImage
  }
  twitter {
    __typename
    twitterTitle
    twitterDescription
    twitterImage
  }
}
    `;
export const HeaderDocument = gql`
    query header($relativePath: String!) {
  header(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HeaderParts
  }
}
    ${HeaderPartsFragmentDoc}`;
export const HeaderConnectionDocument = gql`
    query headerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HeaderFilter) {
  headerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HeaderParts
      }
    }
  }
}
    ${HeaderPartsFragmentDoc}`;
export const HeroDocument = gql`
    query hero($relativePath: String!) {
  hero(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HeroParts
  }
}
    ${HeroPartsFragmentDoc}`;
export const HeroConnectionDocument = gql`
    query heroConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HeroFilter) {
  heroConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HeroParts
      }
    }
  }
}
    ${HeroPartsFragmentDoc}`;
export const OrganizationsDocument = gql`
    query organizations($relativePath: String!) {
  organizations(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...OrganizationsParts
  }
}
    ${OrganizationsPartsFragmentDoc}`;
export const OrganizationsConnectionDocument = gql`
    query organizationsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: OrganizationsFilter) {
  organizationsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...OrganizationsParts
      }
    }
  }
}
    ${OrganizationsPartsFragmentDoc}`;
export const OurSolutionsDocument = gql`
    query ourSolutions($relativePath: String!) {
  ourSolutions(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...OurSolutionsParts
  }
}
    ${OurSolutionsPartsFragmentDoc}`;
export const OurSolutionsConnectionDocument = gql`
    query ourSolutionsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: OurSolutionsFilter) {
  ourSolutionsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...OurSolutionsParts
      }
    }
  }
}
    ${OurSolutionsPartsFragmentDoc}`;
export const TrustedByDocument = gql`
    query trustedBy($relativePath: String!) {
  trustedBy(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TrustedByParts
  }
}
    ${TrustedByPartsFragmentDoc}`;
export const TrustedByConnectionDocument = gql`
    query trustedByConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TrustedByFilter) {
  trustedByConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TrustedByParts
      }
    }
  }
}
    ${TrustedByPartsFragmentDoc}`;
export const HighQualitySolutionsDocument = gql`
    query highQualitySolutions($relativePath: String!) {
  highQualitySolutions(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HighQualitySolutionsParts
  }
}
    ${HighQualitySolutionsPartsFragmentDoc}`;
export const HighQualitySolutionsConnectionDocument = gql`
    query highQualitySolutionsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HighQualitySolutionsFilter) {
  highQualitySolutionsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HighQualitySolutionsParts
      }
    }
  }
}
    ${HighQualitySolutionsPartsFragmentDoc}`;
export const WhyWelcomecureDocument = gql`
    query whyWelcomecure($relativePath: String!) {
  whyWelcomecure(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WhyWelcomecureParts
  }
}
    ${WhyWelcomecurePartsFragmentDoc}`;
export const WhyWelcomecureConnectionDocument = gql`
    query whyWelcomecureConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WhyWelcomecureFilter) {
  whyWelcomecureConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WhyWelcomecureParts
      }
    }
  }
}
    ${WhyWelcomecurePartsFragmentDoc}`;
export const CaseStudiesDocument = gql`
    query caseStudies($relativePath: String!) {
  caseStudies(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CaseStudiesParts
  }
}
    ${CaseStudiesPartsFragmentDoc}`;
export const CaseStudiesConnectionDocument = gql`
    query caseStudiesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CaseStudiesFilter) {
  caseStudiesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CaseStudiesParts
      }
    }
  }
}
    ${CaseStudiesPartsFragmentDoc}`;
export const FooterDocument = gql`
    query footer($relativePath: String!) {
  footer(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FooterParts
  }
}
    ${FooterPartsFragmentDoc}`;
export const FooterConnectionDocument = gql`
    query footerConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FooterFilter) {
  footerConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FooterParts
      }
    }
  }
}
    ${FooterPartsFragmentDoc}`;
export const SeoDocument = gql`
    query seo($relativePath: String!) {
  seo(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SeoParts
  }
}
    ${SeoPartsFragmentDoc}`;
export const SeoConnectionDocument = gql`
    query seoConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SeoFilter) {
  seoConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SeoParts
      }
    }
  }
}
    ${SeoPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      header(variables: HeaderQueryVariables, options?: C): Promise<{data: HeaderQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderQueryVariables, query: string}> {
        return requester<{data: HeaderQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderQueryVariables, query: string}, HeaderQueryVariables>(HeaderDocument, variables, options);
      },
    headerConnection(variables?: HeaderConnectionQueryVariables, options?: C): Promise<{data: HeaderConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderConnectionQueryVariables, query: string}> {
        return requester<{data: HeaderConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeaderConnectionQueryVariables, query: string}, HeaderConnectionQueryVariables>(HeaderConnectionDocument, variables, options);
      },
    hero(variables: HeroQueryVariables, options?: C): Promise<{data: HeroQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroQueryVariables, query: string}> {
        return requester<{data: HeroQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroQueryVariables, query: string}, HeroQueryVariables>(HeroDocument, variables, options);
      },
    heroConnection(variables?: HeroConnectionQueryVariables, options?: C): Promise<{data: HeroConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroConnectionQueryVariables, query: string}> {
        return requester<{data: HeroConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroConnectionQueryVariables, query: string}, HeroConnectionQueryVariables>(HeroConnectionDocument, variables, options);
      },
    organizations(variables: OrganizationsQueryVariables, options?: C): Promise<{data: OrganizationsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OrganizationsQueryVariables, query: string}> {
        return requester<{data: OrganizationsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OrganizationsQueryVariables, query: string}, OrganizationsQueryVariables>(OrganizationsDocument, variables, options);
      },
    organizationsConnection(variables?: OrganizationsConnectionQueryVariables, options?: C): Promise<{data: OrganizationsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OrganizationsConnectionQueryVariables, query: string}> {
        return requester<{data: OrganizationsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OrganizationsConnectionQueryVariables, query: string}, OrganizationsConnectionQueryVariables>(OrganizationsConnectionDocument, variables, options);
      },
    ourSolutions(variables: OurSolutionsQueryVariables, options?: C): Promise<{data: OurSolutionsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OurSolutionsQueryVariables, query: string}> {
        return requester<{data: OurSolutionsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OurSolutionsQueryVariables, query: string}, OurSolutionsQueryVariables>(OurSolutionsDocument, variables, options);
      },
    ourSolutionsConnection(variables?: OurSolutionsConnectionQueryVariables, options?: C): Promise<{data: OurSolutionsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OurSolutionsConnectionQueryVariables, query: string}> {
        return requester<{data: OurSolutionsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OurSolutionsConnectionQueryVariables, query: string}, OurSolutionsConnectionQueryVariables>(OurSolutionsConnectionDocument, variables, options);
      },
    trustedBy(variables: TrustedByQueryVariables, options?: C): Promise<{data: TrustedByQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TrustedByQueryVariables, query: string}> {
        return requester<{data: TrustedByQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TrustedByQueryVariables, query: string}, TrustedByQueryVariables>(TrustedByDocument, variables, options);
      },
    trustedByConnection(variables?: TrustedByConnectionQueryVariables, options?: C): Promise<{data: TrustedByConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TrustedByConnectionQueryVariables, query: string}> {
        return requester<{data: TrustedByConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TrustedByConnectionQueryVariables, query: string}, TrustedByConnectionQueryVariables>(TrustedByConnectionDocument, variables, options);
      },
    highQualitySolutions(variables: HighQualitySolutionsQueryVariables, options?: C): Promise<{data: HighQualitySolutionsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HighQualitySolutionsQueryVariables, query: string}> {
        return requester<{data: HighQualitySolutionsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HighQualitySolutionsQueryVariables, query: string}, HighQualitySolutionsQueryVariables>(HighQualitySolutionsDocument, variables, options);
      },
    highQualitySolutionsConnection(variables?: HighQualitySolutionsConnectionQueryVariables, options?: C): Promise<{data: HighQualitySolutionsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HighQualitySolutionsConnectionQueryVariables, query: string}> {
        return requester<{data: HighQualitySolutionsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HighQualitySolutionsConnectionQueryVariables, query: string}, HighQualitySolutionsConnectionQueryVariables>(HighQualitySolutionsConnectionDocument, variables, options);
      },
    whyWelcomecure(variables: WhyWelcomecureQueryVariables, options?: C): Promise<{data: WhyWelcomecureQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhyWelcomecureQueryVariables, query: string}> {
        return requester<{data: WhyWelcomecureQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhyWelcomecureQueryVariables, query: string}, WhyWelcomecureQueryVariables>(WhyWelcomecureDocument, variables, options);
      },
    whyWelcomecureConnection(variables?: WhyWelcomecureConnectionQueryVariables, options?: C): Promise<{data: WhyWelcomecureConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhyWelcomecureConnectionQueryVariables, query: string}> {
        return requester<{data: WhyWelcomecureConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WhyWelcomecureConnectionQueryVariables, query: string}, WhyWelcomecureConnectionQueryVariables>(WhyWelcomecureConnectionDocument, variables, options);
      },
    caseStudies(variables: CaseStudiesQueryVariables, options?: C): Promise<{data: CaseStudiesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CaseStudiesQueryVariables, query: string}> {
        return requester<{data: CaseStudiesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CaseStudiesQueryVariables, query: string}, CaseStudiesQueryVariables>(CaseStudiesDocument, variables, options);
      },
    caseStudiesConnection(variables?: CaseStudiesConnectionQueryVariables, options?: C): Promise<{data: CaseStudiesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CaseStudiesConnectionQueryVariables, query: string}> {
        return requester<{data: CaseStudiesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CaseStudiesConnectionQueryVariables, query: string}, CaseStudiesConnectionQueryVariables>(CaseStudiesConnectionDocument, variables, options);
      },
    footer(variables: FooterQueryVariables, options?: C): Promise<{data: FooterQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterQueryVariables, query: string}> {
        return requester<{data: FooterQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterQueryVariables, query: string}, FooterQueryVariables>(FooterDocument, variables, options);
      },
    footerConnection(variables?: FooterConnectionQueryVariables, options?: C): Promise<{data: FooterConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterConnectionQueryVariables, query: string}> {
        return requester<{data: FooterConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FooterConnectionQueryVariables, query: string}, FooterConnectionQueryVariables>(FooterConnectionDocument, variables, options);
      },
    seo(variables: SeoQueryVariables, options?: C): Promise<{data: SeoQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeoQueryVariables, query: string}> {
        return requester<{data: SeoQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeoQueryVariables, query: string}, SeoQueryVariables>(SeoDocument, variables, options);
      },
    seoConnection(variables?: SeoConnectionQueryVariables, options?: C): Promise<{data: SeoConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeoConnectionQueryVariables, query: string}> {
        return requester<{data: SeoConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SeoConnectionQueryVariables, query: string}, SeoConnectionQueryVariables>(SeoConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  