# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  header(relativePath: String): Header!
  headerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeaderFilter): HeaderConnection!
  hero(relativePath: String): Hero!
  heroConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeroFilter): HeroConnection!
  organizations(relativePath: String): Organizations!
  organizationsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: OrganizationsFilter): OrganizationsConnection!
  ourSolutions(relativePath: String): OurSolutions!
  ourSolutionsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: OurSolutionsFilter): OurSolutionsConnection!
  trustedBy(relativePath: String): TrustedBy!
  trustedByConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TrustedByFilter): TrustedByConnection!
  highQualitySolutions(relativePath: String): HighQualitySolutions!
  highQualitySolutionsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HighQualitySolutionsFilter): HighQualitySolutionsConnection!
  whyWelcomecure(relativePath: String): WhyWelcomecure!
  whyWelcomecureConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WhyWelcomecureFilter): WhyWelcomecureConnection!
  caseStudies(relativePath: String): CaseStudies!
  caseStudiesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CaseStudiesFilter): CaseStudiesConnection!
  footer(relativePath: String): Footer!
  footerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FooterFilter): FooterConnection!
  seo(relativePath: String): Seo!
  seoConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SeoFilter): SeoConnection!
}

input DocumentFilter {
  header: HeaderFilter
  hero: HeroFilter
  organizations: OrganizationsFilter
  ourSolutions: OurSolutionsFilter
  trustedBy: TrustedByFilter
  highQualitySolutions: HighQualitySolutionsFilter
  whyWelcomecure: WhyWelcomecureFilter
  caseStudies: CaseStudiesFilter
  footer: FooterFilter
  seo: SeoFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Header | Hero | Organizations | OurSolutions | TrustedBy | HighQualitySolutions | WhyWelcomecure | CaseStudies | Footer | Seo | Folder

type HeaderMenuItemsSubItems {
  label: String
  url: String
}

type HeaderMenuItems {
  label: String
  url: String
  subItems: [HeaderMenuItemsSubItems]
}

type HeaderContactInfo {
  label: String
  url: String
  desktopIcon: String
  mobileIcon: String
  flag: String
}

type Header implements Node & Document {
  logo: String
  menuItems: [HeaderMenuItems]
  loginText: String
  registerText: String
  contactInfo: [HeaderContactInfo]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HeaderMenuItemsSubItemsFilter {
  label: StringFilter
  url: StringFilter
}

input HeaderMenuItemsFilter {
  label: StringFilter
  url: StringFilter
  subItems: HeaderMenuItemsSubItemsFilter
}

input HeaderContactInfoFilter {
  label: StringFilter
  url: StringFilter
  desktopIcon: ImageFilter
  mobileIcon: ImageFilter
  flag: ImageFilter
}

input HeaderFilter {
  logo: ImageFilter
  menuItems: HeaderMenuItemsFilter
  loginText: StringFilter
  registerText: StringFilter
  contactInfo: HeaderContactInfoFilter
}

type HeaderConnectionEdges {
  cursor: String!
  node: Header
}

type HeaderConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeaderConnectionEdges]
}

type Hero implements Node & Document {
  title: String
  subtitle: String
  backgroundImage: String
  backgroundImageForMobile: String
  primaryCta: String
  primaryCtaUrl: String
  secondaryCta: String
  secondaryCtaUrl: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HeroFilter {
  title: StringFilter
  subtitle: StringFilter
  backgroundImage: ImageFilter
  backgroundImageForMobile: ImageFilter
  primaryCta: StringFilter
  primaryCtaUrl: StringFilter
  secondaryCta: StringFilter
  secondaryCtaUrl: StringFilter
}

type HeroConnectionEdges {
  cursor: String!
  node: Hero
}

type HeroConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeroConnectionEdges]
}

type OrganizationsLogos {
  src: String
}

type Organizations implements Node & Document {
  title: String
  logos: [OrganizationsLogos]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input OrganizationsLogosFilter {
  src: ImageFilter
}

input OrganizationsFilter {
  title: StringFilter
  logos: OrganizationsLogosFilter
}

type OrganizationsConnectionEdges {
  cursor: String!
  node: Organizations
}

type OrganizationsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [OrganizationsConnectionEdges]
}

type OurSolutionsLeftSolutions {
  title: String
  backgroundImage: String
  highlight: Boolean
}

type OurSolutionsSolutionsList {
  label: String
}

type OurSolutions implements Node & Document {
  title: String
  leftSolutions: [OurSolutionsLeftSolutions]
  rightImage: String
  solutionsList: [OurSolutionsSolutionsList]
  ctaText: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input OurSolutionsLeftSolutionsFilter {
  title: StringFilter
  backgroundImage: ImageFilter
  highlight: BooleanFilter
}

input OurSolutionsSolutionsListFilter {
  label: StringFilter
}

input OurSolutionsFilter {
  title: StringFilter
  leftSolutions: OurSolutionsLeftSolutionsFilter
  rightImage: ImageFilter
  solutionsList: OurSolutionsSolutionsListFilter
  ctaText: StringFilter
}

type OurSolutionsConnectionEdges {
  cursor: String!
  node: OurSolutions
}

type OurSolutionsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [OurSolutionsConnectionEdges]
}

type TrustedByStats {
  title: String
  subtitle: String
}

type TrustedByReviews {
  review: String
  name: String
  position: String
}

type TrustedBy implements Node & Document {
  title: String
  stats: [TrustedByStats]
  reviews: [TrustedByReviews]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TrustedByStatsFilter {
  title: StringFilter
  subtitle: StringFilter
}

input TrustedByReviewsFilter {
  review: StringFilter
  name: StringFilter
  position: StringFilter
}

input TrustedByFilter {
  title: StringFilter
  stats: TrustedByStatsFilter
  reviews: TrustedByReviewsFilter
}

type TrustedByConnectionEdges {
  cursor: String!
  node: TrustedBy
}

type TrustedByConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TrustedByConnectionEdges]
}

type HighQualitySolutionsSolutions {
  image: String
  title: String
  subtitle: String
}

type HighQualitySolutions implements Node & Document {
  title: String
  solutions: [HighQualitySolutionsSolutions]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HighQualitySolutionsSolutionsFilter {
  image: ImageFilter
  title: StringFilter
  subtitle: StringFilter
}

input HighQualitySolutionsFilter {
  title: StringFilter
  solutions: HighQualitySolutionsSolutionsFilter
}

type HighQualitySolutionsConnectionEdges {
  cursor: String!
  node: HighQualitySolutions
}

type HighQualitySolutionsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HighQualitySolutionsConnectionEdges]
}

type WhyWelcomecureFeatures {
  icon: String
  text: String
}

type WhyWelcomecure implements Node & Document {
  title: String
  subtitle: String
  image: String
  ctaText: String
  features: [WhyWelcomecureFeatures]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input WhyWelcomecureFeaturesFilter {
  icon: ImageFilter
  text: StringFilter
}

input WhyWelcomecureFilter {
  title: StringFilter
  subtitle: StringFilter
  image: ImageFilter
  ctaText: StringFilter
  features: WhyWelcomecureFeaturesFilter
}

type WhyWelcomecureConnectionEdges {
  cursor: String!
  node: WhyWelcomecure
}

type WhyWelcomecureConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WhyWelcomecureConnectionEdges]
}

type CaseStudiesItems {
  image: String
  title: String
  description: String
  publishDate: String
  publishBy: String
}

type CaseStudies implements Node & Document {
  title: String
  subtitle: String
  items: [CaseStudiesItems]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CaseStudiesItemsFilter {
  image: ImageFilter
  title: StringFilter
  description: StringFilter
  publishDate: StringFilter
  publishBy: StringFilter
}

input CaseStudiesFilter {
  title: StringFilter
  subtitle: StringFilter
  items: CaseStudiesItemsFilter
}

type CaseStudiesConnectionEdges {
  cursor: String!
  node: CaseStudies
}

type CaseStudiesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CaseStudiesConnectionEdges]
}

type FooterSocialLinks {
  icon: String
  url: String
}

type FooterContactInfo {
  email: String
  phone: String
}

type FooterFooterLinksLinks {
  label: String
  url: String
}

type FooterFooterLinks {
  title: String
  links: [FooterFooterLinksLinks]
}

type FooterPaymentMethods {
  icon: String
}

type FooterLegalLinks {
  label: String
  url: String
}

type Footer implements Node & Document {
  heading: String
  subheading: String
  socialLinks: [FooterSocialLinks]
  emailPlaceholder: String
  newsletterButtonText: String
  contactInfo: FooterContactInfo
  footerLinks: [FooterFooterLinks]
  paymentMethods: [FooterPaymentMethods]
  copyright: String
  legalLinks: [FooterLegalLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input FooterSocialLinksFilter {
  icon: ImageFilter
  url: StringFilter
}

input FooterContactInfoFilter {
  email: StringFilter
  phone: StringFilter
}

input FooterFooterLinksLinksFilter {
  label: StringFilter
  url: StringFilter
}

input FooterFooterLinksFilter {
  title: StringFilter
  links: FooterFooterLinksLinksFilter
}

input FooterPaymentMethodsFilter {
  icon: ImageFilter
}

input FooterLegalLinksFilter {
  label: StringFilter
  url: StringFilter
}

input FooterFilter {
  heading: StringFilter
  subheading: StringFilter
  socialLinks: FooterSocialLinksFilter
  emailPlaceholder: StringFilter
  newsletterButtonText: StringFilter
  contactInfo: FooterContactInfoFilter
  footerLinks: FooterFooterLinksFilter
  paymentMethods: FooterPaymentMethodsFilter
  copyright: StringFilter
  legalLinks: FooterLegalLinksFilter
}

type FooterConnectionEdges {
  cursor: String!
  node: Footer
}

type FooterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FooterConnectionEdges]
}

type SeoOpenGraph {
  ogTitle: String
  ogDescription: String
  ogImage: String
}

type SeoTwitter {
  twitterTitle: String
  twitterDescription: String
  twitterImage: String
}

type Seo implements Node & Document {
  title: String
  description: String
  openGraph: SeoOpenGraph
  twitter: SeoTwitter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SeoOpenGraphFilter {
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: ImageFilter
}

input SeoTwitterFilter {
  twitterTitle: StringFilter
  twitterDescription: StringFilter
  twitterImage: ImageFilter
}

input SeoFilter {
  title: StringFilter
  description: StringFilter
  openGraph: SeoOpenGraphFilter
  twitter: SeoTwitterFilter
}

type SeoConnectionEdges {
  cursor: String!
  node: Seo
}

type SeoConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SeoConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHeader(relativePath: String!, params: HeaderMutation!): Header!
  createHeader(relativePath: String!, params: HeaderMutation!): Header!
  updateHero(relativePath: String!, params: HeroMutation!): Hero!
  createHero(relativePath: String!, params: HeroMutation!): Hero!
  updateOrganizations(relativePath: String!, params: OrganizationsMutation!): Organizations!
  createOrganizations(relativePath: String!, params: OrganizationsMutation!): Organizations!
  updateOurSolutions(relativePath: String!, params: OurSolutionsMutation!): OurSolutions!
  createOurSolutions(relativePath: String!, params: OurSolutionsMutation!): OurSolutions!
  updateTrustedBy(relativePath: String!, params: TrustedByMutation!): TrustedBy!
  createTrustedBy(relativePath: String!, params: TrustedByMutation!): TrustedBy!
  updateHighQualitySolutions(relativePath: String!, params: HighQualitySolutionsMutation!): HighQualitySolutions!
  createHighQualitySolutions(relativePath: String!, params: HighQualitySolutionsMutation!): HighQualitySolutions!
  updateWhyWelcomecure(relativePath: String!, params: WhyWelcomecureMutation!): WhyWelcomecure!
  createWhyWelcomecure(relativePath: String!, params: WhyWelcomecureMutation!): WhyWelcomecure!
  updateCaseStudies(relativePath: String!, params: CaseStudiesMutation!): CaseStudies!
  createCaseStudies(relativePath: String!, params: CaseStudiesMutation!): CaseStudies!
  updateFooter(relativePath: String!, params: FooterMutation!): Footer!
  createFooter(relativePath: String!, params: FooterMutation!): Footer!
  updateSeo(relativePath: String!, params: SeoMutation!): Seo!
  createSeo(relativePath: String!, params: SeoMutation!): Seo!
}

input DocumentUpdateMutation {
  header: HeaderMutation
  hero: HeroMutation
  organizations: OrganizationsMutation
  ourSolutions: OurSolutionsMutation
  trustedBy: TrustedByMutation
  highQualitySolutions: HighQualitySolutionsMutation
  whyWelcomecure: WhyWelcomecureMutation
  caseStudies: CaseStudiesMutation
  footer: FooterMutation
  seo: SeoMutation
  relativePath: String
}

input DocumentMutation {
  header: HeaderMutation
  hero: HeroMutation
  organizations: OrganizationsMutation
  ourSolutions: OurSolutionsMutation
  trustedBy: TrustedByMutation
  highQualitySolutions: HighQualitySolutionsMutation
  whyWelcomecure: WhyWelcomecureMutation
  caseStudies: CaseStudiesMutation
  footer: FooterMutation
  seo: SeoMutation
}

input HeaderMenuItemsSubItemsMutation {
  label: String
  url: String
}

input HeaderMenuItemsMutation {
  label: String
  url: String
  subItems: [HeaderMenuItemsSubItemsMutation]
}

input HeaderContactInfoMutation {
  label: String
  url: String
  desktopIcon: String
  mobileIcon: String
  flag: String
}

input HeaderMutation {
  logo: String
  menuItems: [HeaderMenuItemsMutation]
  loginText: String
  registerText: String
  contactInfo: [HeaderContactInfoMutation]
}

input HeroMutation {
  title: String
  subtitle: String
  backgroundImage: String
  backgroundImageForMobile: String
  primaryCta: String
  primaryCtaUrl: String
  secondaryCta: String
  secondaryCtaUrl: String
}

input OrganizationsLogosMutation {
  src: String
}

input OrganizationsMutation {
  title: String
  logos: [OrganizationsLogosMutation]
}

input OurSolutionsLeftSolutionsMutation {
  title: String
  backgroundImage: String
  highlight: Boolean
}

input OurSolutionsSolutionsListMutation {
  label: String
}

input OurSolutionsMutation {
  title: String
  leftSolutions: [OurSolutionsLeftSolutionsMutation]
  rightImage: String
  solutionsList: [OurSolutionsSolutionsListMutation]
  ctaText: String
}

input TrustedByStatsMutation {
  title: String
  subtitle: String
}

input TrustedByReviewsMutation {
  review: String
  name: String
  position: String
}

input TrustedByMutation {
  title: String
  stats: [TrustedByStatsMutation]
  reviews: [TrustedByReviewsMutation]
}

input HighQualitySolutionsSolutionsMutation {
  image: String
  title: String
  subtitle: String
}

input HighQualitySolutionsMutation {
  title: String
  solutions: [HighQualitySolutionsSolutionsMutation]
}

input WhyWelcomecureFeaturesMutation {
  icon: String
  text: String
}

input WhyWelcomecureMutation {
  title: String
  subtitle: String
  image: String
  ctaText: String
  features: [WhyWelcomecureFeaturesMutation]
}

input CaseStudiesItemsMutation {
  image: String
  title: String
  description: String
  publishDate: String
  publishBy: String
}

input CaseStudiesMutation {
  title: String
  subtitle: String
  items: [CaseStudiesItemsMutation]
}

input FooterSocialLinksMutation {
  icon: String
  url: String
}

input FooterContactInfoMutation {
  email: String
  phone: String
}

input FooterFooterLinksLinksMutation {
  label: String
  url: String
}

input FooterFooterLinksMutation {
  title: String
  links: [FooterFooterLinksLinksMutation]
}

input FooterPaymentMethodsMutation {
  icon: String
}

input FooterLegalLinksMutation {
  label: String
  url: String
}

input FooterMutation {
  heading: String
  subheading: String
  socialLinks: [FooterSocialLinksMutation]
  emailPlaceholder: String
  newsletterButtonText: String
  contactInfo: FooterContactInfoMutation
  footerLinks: [FooterFooterLinksMutation]
  paymentMethods: [FooterPaymentMethodsMutation]
  copyright: String
  legalLinks: [FooterLegalLinksMutation]
}

input SeoOpenGraphMutation {
  ogTitle: String
  ogDescription: String
  ogImage: String
}

input SeoTwitterMutation {
  twitterTitle: String
  twitterDescription: String
  twitterImage: String
}

input SeoMutation {
  title: String
  description: String
  openGraph: SeoOpenGraphMutation
  twitter: SeoTwitterMutation
}

schema {
  query: Query
  mutation: Mutation
}
